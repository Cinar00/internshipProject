// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Trainin_App_for_Repository.Data;

namespace Trainin_App_for_Repository.Migrations
{
    [DbContext(typeof(FuelPriceDbContext))]
    [Migration("20220817084952_CreateDatabase")]
    partial class CreateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Trainin_App_for_Repository.Data.Entities.AddressesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFav")
                        .HasColumnType("bit");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsersEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsersEntityId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Trainin_App_for_Repository.Data.Entities.BrandsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DieselKatkiliPrice")
                        .HasColumnType("float");

                    b.Property<double>("DieselPrice")
                        .HasColumnType("float");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GasolineKatkiliPrice")
                        .HasColumnType("float");

                    b.Property<double>("GasolinePrice")
                        .HasColumnType("float");

                    b.Property<string>("LastUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("LpgPrice")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Trainin_App_for_Repository.Data.Entities.CarsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFav")
                        .HasColumnType("bit");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsersEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsersEntityId");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("Trainin_App_for_Repository.Data.Entities.CitiesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Trainin_App_for_Repository.Data.Entities.DistrictsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CitiesEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CitiesEntityId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Trainin_App_for_Repository.Data.Entities.FavStationsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DieselKatkiliPrice")
                        .HasColumnType("float");

                    b.Property<double>("DieselPrice")
                        .HasColumnType("float");

                    b.Property<double>("GasolineKatkiliPrice")
                        .HasColumnType("float");

                    b.Property<double>("GasolinePrice")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<double>("LpgPrice")
                        .HasColumnType("float");

                    b.Property<string>("SpecificName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsersEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsersEntityId");

                    b.ToTable("FavStations");
                });

            modelBuilder.Entity("Trainin_App_for_Repository.Data.Entities.UsersEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Trainin_App_for_Repository.Data.Entities.AddressesEntity", b =>
                {
                    b.HasOne("Trainin_App_for_Repository.Data.Entities.UsersEntity", null)
                        .WithMany("Address")
                        .HasForeignKey("UsersEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Trainin_App_for_Repository.Data.Entities.CarsEntity", b =>
                {
                    b.HasOne("Trainin_App_for_Repository.Data.Entities.UsersEntity", null)
                        .WithMany("Car")
                        .HasForeignKey("UsersEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Trainin_App_for_Repository.Data.Entities.DistrictsEntity", b =>
                {
                    b.HasOne("Trainin_App_for_Repository.Data.Entities.CitiesEntity", null)
                        .WithMany("DistrictsEntity")
                        .HasForeignKey("CitiesEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Trainin_App_for_Repository.Data.Entities.FavStationsEntity", b =>
                {
                    b.HasOne("Trainin_App_for_Repository.Data.Entities.UsersEntity", null)
                        .WithMany("FavStations")
                        .HasForeignKey("UsersEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Trainin_App_for_Repository.Data.Entities.CitiesEntity", b =>
                {
                    b.Navigation("DistrictsEntity");
                });

            modelBuilder.Entity("Trainin_App_for_Repository.Data.Entities.UsersEntity", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Car");

                    b.Navigation("FavStations");
                });
#pragma warning restore 612, 618
        }
    }
}
